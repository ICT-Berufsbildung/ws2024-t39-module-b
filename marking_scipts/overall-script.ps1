# B1
@{"OU=MKT,DC=paris,DC=local"="mkt";"OU=SALES,DC=paris,DC=local"="sales";"OU=TECH,DC=paris,DC=local"="tech";"OU=HR,DC=paris,DC=local"="hr"}; $groupMapping = @{"mkt"="MKT";"sales"="SALES";"tech"="TECH";"hr"="HR"}; function Get-UserCountInOU {param([string]$ouDistinguishedName,[string]$userPrefix,[string]$groupName);$usersInOU = Get-ADUser -SearchBase $ouDistinguishedName -Filter * -SearchScope Subtree; $filteredUsers = $usersInOU | Where-Object {$_.SamAccountName -like "$userPrefix*" -and (Get-ADUser $_.DistinguishedName -Property MemberOf).MemberOf -contains (Get-ADGroup -Identity $groupName).DistinguishedName}; return $filteredUsers.Count}; $allMatch = $true; foreach ($ou in $ouPrefixMapping.Keys) {$prefix = $ouPrefixMapping[$ou]; $group = $groupMapping[$prefix]; $userCount = Get-UserCountInOU -ouDistinguishedName $ou -userPrefix $prefix -groupName $group; Write-Output "The OU '$ou' contains $userCount users with the prefix '$prefix' and membership in group '$group'."; if ($userCount -ne 20) {$allMatch = $false}}; Write-Host "B1 component: "; if ($allMatch) {Write-Host "passed" -ForegroundColor Green} else {Write-Host "failed" -ForegroundColor Red}


# B2
[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain().Name


#B3-1
Import-Module GroupPolicy; $GPOName = "Desktop"; $Domain = "paris.local"; $ReportPath = "$env:TEMP\GPOReport.xml"; try {Get-GPOReport -Name $GPOName -Domain $Domain -ReportType XML -Path $ReportPath} catch {Write-Error "Failed to generate GPO report for '$GPOName' in domain '$Domain'. Error: $_"; exit 1}; [xml]$GPOReport = Get-Content -Path $ReportPath; $ns = New-Object System.Xml.XmlNamespaceManager($GPOReport.NameTable); $ns.AddNamespace("q1", "http://www.microsoft.com/GroupPolicy/Settings/Security"); $XPath = "//q1:SecurityOptions[q1:KeyName='MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\System\LegalNoticeText']/q1:Display/q1:Name[text()='Interactive logon: Message text for users attempting to log on']/../q1:DisplayStrings/q1:Value"; $Setting = $GPOReport.SelectSingleNode($XPath, $ns); $Value = $Setting.InnerText; $ExpectedMessage = "Welcome to Lyon! Only authorised personnel allowed to access. Should you try to break in, I knew you were trouble"; if ($Setting) {if ($Value -eq $ExpectedMessage) {Write-Output "The 'Interactive logon: Message text for users attempting to log on' setting is configured with the expected message."; Write-Host "B3-1 component"; Write-Output "Configured: " $Value; Write-Host "passed" -ForegroundColor Green} else {Write-Output "The 'Interactive logon: Message text for users attempting to log on' setting is configured, but the message does not match the expected message."; Write-Host "B3-1 component"; Write-Host "failed" -ForegroundColor Red; Write-Output "Configured: " $Value}} else {Write-Output "The 'Interactive logon: Message text for users attempting to log on' setting is not configured in the '$GPOName' GPO."; Write-Host "B3-1 component"; Write-Host "failed" -ForegroundColor Red}; Remove-Item -Path $ReportPath -Force

#B3-2
$gpoName = "Updates"; $domainName = "paris.local"; $gpos = Get-GPO -All -Domain $domainName | Where-Object { $_.DisplayName.Trim() -ieq $gpoName.Trim() }; Write-Host "B3-2 component"; if ($gpos.Count -eq 0) {Write-Host "No GPO named '$gpoName' found in the domain '$domainName'." -ForegroundColor Red} elseif ($gpos.Count -gt 1) {Write-Host "Multiple GPOs named '$gpoName' found in the domain '$domainName'. Please refine your search." -ForegroundColor Red} else { $gpo = $gpos[0]; $gpoReport = Get-GPOReport -Guid $gpo.Id -ReportType Xml; [xml]$gpoXml = $gpoReport; if ($gpoXml) { $ns = New-Object System.Xml.XmlNamespaceManager($gpoXml.NameTable); $ns.AddNamespace("q1", "http://www.microsoft.com/GroupPolicy/Settings/Registry"); $condition2 = $gpoXml.SelectSingleNode("//q1:DropDownList[q1:Name='Scheduled install day: ']/q1:Value/q1:Name", $ns).'#text' -eq "6 - Every Friday"; $condition3 = $gpoXml.SelectSingleNode("//q1:DropDownList[q1:Name='Scheduled install time:']/q1:Value/q1:Name", $ns).'#text' -eq "13:00"; Write-Host $gpoXml.SelectSingleNode("//q1:DropDownList[q1:Name='Scheduled install day: ']/q1:Value/q1:Name", $ns).'#text'; Write-Host $gpoXml.SelectSingleNode("//q1:DropDownList[q1:Name='Scheduled install time:']/q1:Value/q1:Name", $ns).'#text'; if ($condition2 -and $condition3) {Write-Host "passed" -ForegroundColor Green} else {Write-Host "failed" -ForegroundColor Red}} else {Write-Host "Failed to load GPO report XML for GPO '$gpoName'." -ForegroundColor Red}}

#B3-3
$gpoName="MKT";$domainName="paris.local";$gpos=Get-GPO -All -Domain $domainName|Where-Object{$_.DisplayName.Trim()-ieq$gpoName.Trim()};if($gpos.Count-eq0){Write-Host"No GPO named '$gpoName' found in the domain '$domainName'."-ForegroundColor Red}elseif($gpos.Count-gt1){Write-Host"Multiple GPOs named '$gpoName' found in the domain '$domainName'. Please refine your search."-ForegroundColor Red}else{$gpo=$gpos[0];[xml]$gpoXml=(Get-GPOReport -Guid $gpo.Id -ReportType Xml);$ns=New-Object System.Xml.XmlNamespaceManager($gpoXml.NameTable);$ns.AddNamespace("q1","http://www.microsoft.com/GroupPolicy/Settings/Registry");$allConditionsMet=$true;$failedPolicies=@();$dontRunAppsPolicy=$gpoXml.GPO.User.ExtensionData.Extension.Policy|Where-Object{$_.Name -eq "Don't run specified Windows applications"};if($dontRunAppsPolicy-ne$null){$dontRunAppsListBox=$dontRunAppsPolicy.ListBox;$dontRunAppsListBox.Value.Element.Data}else{Write-Host"'Don't run specified Windows applications' policy is not found"-ForegroundColor Red;$allConditionsMet=$false;$failedPolicies+="'Don't run specified Windows applications'"};$preventCmdPolicy=$gpoXml.GPO.User.ExtensionData.Extension.Policy|Where-Object{$_.Name -eq "Prevent access to the command prompt"};$preventCmdPolicy.State;$removeTaskManagerPolicy=$gpoXml.GPO.User.ExtensionData.Extension.Policy|Where-Object{$_.Name -eq "Remove Task Manager"};$removeTaskManagerPolicy.State}


#B3-4
$gpoName="TECH";$domainName="paris.local";$gpos=Get-GPO -All -Domain $domainName | Where-Object {$_.DisplayName.Trim() -ieq $gpoName.Trim()};if($gpos.Count -eq 0){Write-Host "No GPO named '$gpoName' found in the domain '$domainName'." -ForegroundColor Red}elseif($gpos.Count -gt 1){Write-Host "Multiple GPOs named '$gpoName' found in the domain '$domainName'. Please refine your search." -ForegroundColor Red}else{$gpo=$gpos[0];$gpoReport=Get-GPOReport -Guid $gpo.Id -ReportType Xml;[xml]$gpoXml=$gpoReport;$xml=[xml]$gpoReport;if($xml.GPO.Name -eq "TECH"){$extensionData=$xml.GPO.User.ExtensionData;$q1Name=$extensionData.Extension.ScheduledTasks.TaskV2.Properties.Task.Triggers.LogonTrigger.Enabled;$q1String=$extensionData.Extension.ScheduledTasks.TaskV2.Properties.Task.Actions.Exec.Command;Write-Host $q1Name;Write-Host $q1String;if($q1Name -eq "true" -and $q1String -like "*powershell.exe*"){Write-Host "B3-4 component passed" -ForegroundColor Green}else{Write-Host "B3-4 component failed" -ForegroundColor Red}}else{Write-Host "GPO with name 'TECH' not found." -ForegroundColor Red}}


#B3-5
Import-Module GroupPolicy;$gpoName="SALES";$domainName="paris.local";$gpos=Get-GPO -All -Domain $domainName | Where-Object{ $_.DisplayName.Trim() -ieq $gpoName.Trim() };$cmdPolicyPath="HKCU\Software\Policies\Microsoft\Windows\System";$cmdPolicyName="DisableCMD";$runMenuPolicyPath="HKCU\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer";$runMenuPolicyName="NoRun";function Check-GPOPolicy{param([string]$GPOName,[string]$Path,[string]$Name)try{$value=Get-GPRegistryValue -Name $GPOName -Key $Path -ValueName $Name -Domain "paris.local" -ErrorAction Stop;return $value}catch{return $null}};$runMenuPolicyValue=Check-GPOPolicy -GPOName $gpoName -Path $runMenuPolicyPath -Name $runMenuPolicyName;Write-Host $runMenuPolicyValue.Value;if($gpos.Count -eq 0){Write-Host "No GPO named '$gpoName' found in the domain '$domainName'." -ForegroundColor Red}elseif($gpos.Count -gt 1){Write-Host "Multiple GPOs named '$gpoName' found in the domain '$domainName'. Please refine your search." -ForegroundColor Red}else{$gpo=$gpos[0];$gpoReport=Get-GPOReport -Guid $gpo.Id -ReportType Xml;[xml]$gpoXml=$gpoReport;if($gpoXml){$ns=New-Object System.Xml.XmlNamespaceManager($gpoXml.NameTable);$ns.AddNamespace("q1","http://www.microsoft.com/GroupPolicy/Settings/Registry");$allConditionsMet=$true;$failedPolicies=@();$preventCmdPolicy=$gpoXml.GPO.User.ExtensionData.Extension.Policy | Where-Object{ $_.Name -eq "Prevent access to the command prompt" };Write-Host $preventCmdPolicy.State;if($preventCmdPolicy -ne $null -and $preventCmdPolicy.State -eq "Enabled"){Write-Host "'Prevent access to the command prompt' is enabled" -ForegroundColor Yellow}else{Write-Host "'Prevent access to the command prompt' is not enabled" -ForegroundColor Red;$allConditionsMet=$false;$failedPolicies+="'Prevent access to the command prompt'"};if($runMenuPolicyValue -ne $null -and $runMenuPolicyValue.Value -eq 1){Write-Host "Remove Run menu from Start Menu policy is enabled in the SALES GPO" -ForegroundColor Yellow}else{Write-Host "Remove Run menu from Start Menu policy is not enabled in the SALES GPO" -ForegroundColor Red;$allConditionsMet=$false;$failedPolicies+="'Remove Run menu from Start Menu'"};if($allConditionsMet){Write-Host "B3-5 component passed" -ForegroundColor Green}else{Write-Host "B3-5 component failed" -ForegroundColor Red;Write-Host "Failed policies:" -ForegroundColor Red;$failedPolicies | ForEach-Object{Write-Host "- $_" -ForegroundColor Red}}}else{Write-Host "Failed to load GPO report XML for GPO '$gpoName'." -ForegroundColor Red}}

#B3-6
$gpoName="DOMSEC";$domainName="paris.local";try{$gpo=Get-GPO -Name $gpoName -Domain $domainName -ErrorAction Stop;$gpoPermissions=Get-GPPermissions -Guid $gpo.Id -All -Domain $domainName -ErrorAction Stop;$xml=[xml](Get-GPOReport -Guid $gpo.Id -ReportType Xml);$ns=New-Object System.Xml.XmlNamespaceManager($xml.NameTable);$ns.AddNamespace("q1","http://www.microsoft.com/GroupPolicy/Settings/Environment");$ns.AddNamespace("q2","http://www.microsoft.com/GroupPolicy/Settings/Security");$ns.AddNamespace("q3","http://www.microsoft.com/GroupPolicy/Settings/Registry");foreach($ext in $xml.GPO.Computer.ExtensionData){switch($ext.Name){"Environment Variables"{$props=$ext.Extension.SelectSingleNode("q1:EnvironmentVariables/q1:EnvironmentVariable/q1:Properties",$ns);Write-Host $props.name,$props.value}"Security"{Write-Host ($ext.Extension.Account|Where-Object{$_.Name -eq "MaximumPasswordAge"}).SettingNumber;Write-Host ($ext.Extension.SecurityOptions | Where-Object { $_.Display.Name -eq "Network security: Do not store LAN Manager hash value on next password change" }).SettingNumber;Write-Host ($ext.Extension.SecurityOptions|Where-Object{$_.SystemAccessPolicyName -eq "EnableAdminAccount"}).SettingNumber}}}}catch{}

#B3-7
